/*
 * This file is generated by jOOQ.
 */
package com.shs.codegen.maven.jooq.tables;


import com.shs.codegen.maven.jooq.Indexes;
import com.shs.codegen.maven.jooq.Keys;
import com.shs.codegen.maven.jooq.Public;
import com.shs.codegen.maven.jooq.tables.records.BcVisitRequestRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BcVisitRequest extends TableImpl<BcVisitRequestRecord> {

    private static final long serialVersionUID = -1688943537;

    /**
     * The reference instance of <code>public.bc_visit_request</code>
     */
    public static final BcVisitRequest BC_VISIT_REQUEST = new BcVisitRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BcVisitRequestRecord> getRecordType() {
        return BcVisitRequestRecord.class;
    }

    /**
     * The column <code>public.bc_visit_request.id</code>.
     */
    public final TableField<BcVisitRequestRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('bc_visit_request_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.bc_visit_request.user_id</code>.
     */
    public final TableField<BcVisitRequestRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bc_visit_request.created_at</code>.
     */
    public final TableField<BcVisitRequestRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.bc_visit_request.updated_at</code>.
     */
    public final TableField<BcVisitRequestRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bc_visit_request.visit_date</code>.
     */
    public final TableField<BcVisitRequestRecord, Timestamp> VISIT_DATE = createField("visit_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.bc_visit_request</code> table reference
     */
    public BcVisitRequest() {
        this(DSL.name("bc_visit_request"), null);
    }

    /**
     * Create an aliased <code>public.bc_visit_request</code> table reference
     */
    public BcVisitRequest(String alias) {
        this(DSL.name(alias), BC_VISIT_REQUEST);
    }

    /**
     * Create an aliased <code>public.bc_visit_request</code> table reference
     */
    public BcVisitRequest(Name alias) {
        this(alias, BC_VISIT_REQUEST);
    }

    private BcVisitRequest(Name alias, Table<BcVisitRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private BcVisitRequest(Name alias, Table<BcVisitRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BcVisitRequest(Table<O> child, ForeignKey<O, BcVisitRequestRecord> key) {
        super(child, key, BC_VISIT_REQUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BC_VISIT_REQUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BcVisitRequestRecord, Long> getIdentity() {
        return Keys.IDENTITY_BC_VISIT_REQUEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BcVisitRequestRecord> getPrimaryKey() {
        return Keys.BC_VISIT_REQUEST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BcVisitRequestRecord>> getKeys() {
        return Arrays.<UniqueKey<BcVisitRequestRecord>>asList(Keys.BC_VISIT_REQUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BcVisitRequestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BcVisitRequestRecord, ?>>asList(Keys.BC_VISIT_REQUEST__USER_VISIT_REQUEST);
    }

    public BcUser bcUser() {
        return new BcUser(this, Keys.BC_VISIT_REQUEST__USER_VISIT_REQUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BcVisitRequest as(String alias) {
        return new BcVisitRequest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BcVisitRequest as(Name alias) {
        return new BcVisitRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BcVisitRequest rename(String name) {
        return new BcVisitRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BcVisitRequest rename(Name name) {
        return new BcVisitRequest(name, null);
    }
}
